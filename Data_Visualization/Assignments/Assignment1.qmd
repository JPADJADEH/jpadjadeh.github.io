---
title: "Assignment 1: Data Visualization"
author: "JP ADJADEH"
date: "September 26, 2025"
format: html
---

## 1. Analyzing Anscombe's Plots

Anscombe's Quartet teaches us that data can look the same in numbers but tell very different stories when you make a graph. All four datasets have the same averages, correlations, and regression lines, but the plots show one is a straight line, another is curved, and others are shaped by outliers. 

**The problem:** If we only look at numbers, we may miss these hidden patterns and make wrong conclusions. 

**The solution:** Always graph the data before and after running models. Simple plots like scatterplots can reveal issues like outliers, non-linear trends, or unusual points.

### Loading and Exploring the Data

```{r}
#| label: load-data
#| include: false

# Load Anscombe's data
data(anscombe)
summary(anscombe)
```

### Building Linear Models

```{r}
#| label: build-models
#| include: false

# Create four model objects
lm1 <- lm(y1 ~ x1, data=anscombe)
lm2 <- lm(y2 ~ x2, data=anscombe)
lm3 <- lm(y3 ~ x3, data=anscombe)
lm4 <- lm(y4 ~ x4, data=anscombe)

# Compare model coefficients
ff <- y ~ x
mods <- setNames(as.list(1:4), paste0("lm", 1:4))

for(i in 1:4) {
  ff[2:3] <- lapply(paste0(c("y","x"), i), as.name)
  mods[[i]] <- lmi <- lm(ff, data = anscombe)
}

# Show coefficients are identical
sapply(mods, coef)
```

### Visualizing the Four Datasets

```{r}
#| label: anscombe-plots
#| fig-width: 10
#| fig-height: 8
#| fig-cap: "Anscombe's Quartet: Four datasets with identical summary statistics but very different patterns"

# Set up plotting layout
op <- par(mfrow = c(2, 2), mar = 0.1+c(4,4,1,1), oma = c(0, 0, 2, 0))

# Plot all four datasets with regression lines
for(i in 1:4) {
  ff[2:3] <- lapply(paste0(c("y","x"), i), as.name)
  plot(ff, data = anscombe, col = "red", pch = 21, bg = "orange", cex = 1.2,
       xlim = c(3, 19), ylim = c(3, 13),
       main = paste("Dataset", i))
  abline(mods[[i]], col = "blue", lwd = 2)
}
mtext("Anscombe's 4 Regression Data Sets", outer = TRUE, cex = 1.5)
par(op)
```

### Key Insights

The visualization reveals four very different relationships:

- **Dataset 1:** Perfect linear relationship
- **Dataset 2:** Clear non-linear (curved) relationship  
- **Dataset 3:** Linear relationship with one outlier
- **Dataset 4:** No relationship except for one influential point

Despite these dramatic differences, all four datasets have:
- Same mean for x and y
- Same correlation coefficient
- Same regression line
- Same R-squared value

This demonstrates why **visualization is essential** for understanding data patterns that summary statistics alone cannot reveal.

## 2. Changing Color in Fall Script

This section demonstrates generative art using L-systems to create plant-like structures. The original script uses "burlywood3" color, but we can experiment with different fall colors to create various artistic effects.

### Setup Required Packages

```{r}
#| label: fall-setup
#| include: false
#| message: false

# Install and load required packages
if (!require(gsubfn)) install.packages("gsubfn")
if (!require(tidyverse)) install.packages("tidyverse")

library(gsubfn)
library(tidyverse)
```

### Generating the Fall Plant Art

```{r}
#| label: fall-art
#| fig-width: 8
#| fig-height: 8
#| fig-cap: "Generative plant art using L-systems - Modified with different fall colors"

# Define elements in plant art
axiom <- "X"
rules <- list("X"="F-[[X]+X]+F[+FX]-X", "F"="FF")
angle <- 22.5
depth <- 6

# Generate the L-system string
for (i in 1:depth) axiom <- gsubfn(".", rules, axiom)

# Extract actions
actions <- str_extract_all(axiom, "\\d*\\+|\\d*\\-|F|L|R|\\[|\\]|\\|") %>% unlist

# Initialize data structures
status <- data.frame(x=numeric(0), y=numeric(0), alfa=numeric(0))
points <- data.frame(x1 = 0, y1 = 0, x2 = NA, y2 = NA, alfa=90, depth=1)

# Generate drawing data
for (action in actions) {
  if (action=="F") {
    x <- points[1, "x1"] + cos(points[1, "alfa"]*(pi/180))
    y <- points[1, "y1"] + sin(points[1, "alfa"]*(pi/180))
    points[1,"x2"] <- x
    points[1,"y2"] <- y
    data.frame(x1 = x, y1 = y, x2 = NA, y2 = NA,
               alfa=points[1, "alfa"],
               depth=points[1,"depth"]) %>% rbind(points) -> points
  }
  if (action %in% c("+", "-")){
    alfa <- points[1, "alfa"]
    points[1, "alfa"] <- eval(parse(text=paste0("alfa",action, angle)))
  }
  if(action=="["){
    data.frame(x=points[1, "x1"], y=points[1, "y1"], alfa=points[1, "alfa"]) %>%
      rbind(status) -> status
    points[1, "depth"] <- points[1, "depth"]+1
  }
  if(action=="]"){
    depth <- points[1, "depth"]
    points[-1,] -> points
    data.frame(x1=status[1, "x"], y1=status[1, "y"], x2=NA, y2=NA,
               alfa=status[1, "alfa"],
               depth=depth-1) %>%
      rbind(points) -> points
    status[-1,] -> status
  }
}

# Create the plot with modified fall color
ggplot() +
  geom_segment(aes(x = x1, y = y1, xend = x2, yend = y2),
               lineend = "round",
               color="darkred", # Changed from original "burlywood3" to "darkred"
               data=na.omit(points)) +
  coord_fixed(ratio = 1) +
  theme_void() +
  labs(title = "Fall Plant Art - L-System Generated",
       subtitle = "Color changed from burlywood3 to darkred for autumn theme")
```

### Color Experiment Notes

The original script used `color="burlywood3"` which creates a tan/brown appearance. For this fall-themed version, I changed it to `color="darkred"` to evoke autumn foliage. Other fall color options you could experiment with include:

- `"orange"` - Bright autumn orange
- `"goldenrod"` - Golden yellow fall color  
- `"saddlebrown"` - Rich brown
- `"firebrick"` - Deep red
- `"chocolate"` - Warm brown

The L-system uses rules to recursively generate a tree-like structure, creating organic, plant-like patterns through mathematical iteration.

## 3. Critique of Plot Design (Nathan Yau Principles)

*[This section will be completed in the next iteration]*